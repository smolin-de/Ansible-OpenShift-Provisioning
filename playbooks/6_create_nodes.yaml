---

# TODO: Hack to update HMC file server git repository
- name: Update HMC file server git repository
  hosts: hmc_file_server
  gather_facts: false
  tasks:
    - name: Update git repository
      ansible.builtin.shell: |
        cd ~/ftp/
        git pull
      register: cmd_output
      changed_when: ("Already up to date." not in cmd_output.stdout_lines)

    - name: Show above command output
      ansible.builtin.debug:
        var: cmd_output.stdout_lines

- name: 6 create nodes - find lpar host files
  hosts: localhost
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  tasks:
    - name: Loop over node types and include role
      # Disabled function
      when: 0
      ansible.builtin.include_role:
        name: check_for_lpar_nodes
      loop:
        - bootstrap
        - compute
        - control
      loop_control:
        loop_var: node_type

# Prepare and then create the temporary bootstrap node and the control nodes
- name: 6 create nodes - prepare KVM guests
  hosts: kvm_host
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - prep_kvm_guests
    # Delete control, compute and infra nodes, if exists
    - delete_nodes

- name: 6 create nodes - create bootstrap KVM node
  hosts: kvm_host[0]
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - common
    - role: create_bootstrap
      when: env.cluster.nodes.bootstrap.vm_name[0] is defined

- name: 6 create nodes - bootstrap and control ( if in lpar )
  hosts: bastion
  become: true
  tasks:
    - name: boot bootstrap
      vars:
        node_type: "bootstrap"
        node_name: "{{ item }}"
        ignition: "bootstrap"
      ansible.builtin.include_tasks:
        file: ../roles/boot_LPAR/tasks/main.yaml
      loop: "{{ q('list', env.cluster.nodes[node_type].vm_name) | flatten }}"
      # Disabled function
      when: 0

    - name: boot control nodes
      vars:
        node_type: "control"
        node_name: "{{ item }}"
        ignition: "master"
      ansible.builtin.include_tasks:
        file: ../roles/boot_LPAR/tasks/main.yaml
      loop: "{{ q('list', env.cluster.nodes[node_type].vm_name) | flatten }}"
      # Disabled function
      when: 0

- name: 6 create nodes - create control nodes using KVM
  hosts: kvm_host
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - common
    - role: create_control_nodes
      when: env.cluster.nodes.control.vm_name is defined

- name: 6 create nodes - create bootstrap using LPAR boot from ftp
  hosts: localhost
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  tasks:
    - name: Boot bootstrap LPAR from ftp
      when: env.cluster.nodes.bootstrap.lpar_name[0] is defined
      ansible.builtin.include_role:
        name: boot_lpar_from_ftp
      vars:
        parm_lpar_names: "{{ q('list', env.cluster.nodes.bootstrap.lpar_name) | flatten }}"
        parm_lpar_prm_files: "{{ q('list', env.cluster.nodes.bootstrap.lpar_prm_file) | flatten }}"
      # Loop is not really required, because we have only one bootsrap.
      loop: "{{ q('list', env.cluster.nodes.bootstrap.lpar_name) | flatten }}"
      loop_control:
        index_var: idx

- name: 6 create nodes - create control using LPAR boot from ftp
  hosts: localhost
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  tasks:
    - name: Boot control LPAR from ftp
      when: env.cluster.nodes.control.lpar_name[0] is defined
      ansible.builtin.include_role:
        name: boot_lpar_from_ftp
      vars:
        parm_lpar_names: "{{ q('list', env.cluster.nodes.control.lpar_name) | flatten }}"
        parm_lpar_prm_files: "{{ q('list', env.cluster.nodes.control.lpar_prm_file) | flatten }}"
      loop: "{{ q('list', env.cluster.nodes.control.lpar_name) | flatten }}"
      loop_control:
        index_var: idx

- name: 6 create nodes - wait for bootstrap to connect control plane (for non-root user)
  hosts: bastion
  become: true
  environment:
    KUBECONFIG: "/home/{{ env.bastion.access.user }}/.kube/config"
  gather_facts: true
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - {role: wait_for_bootstrap, when: env.bastion.access.user != "root"}

- name: 6 create nodes - wait for bootstrap to connect to control plane (for root user)
  hosts: bastion
  become: true
  environment:
    KUBECONFIG: "/{{ env.bastion.access.user }}/.kube/config"
  gather_facts: true
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - {role: wait_for_bootstrap, when: env.bastion.access.user == "root"}

- name: 6 create nodes - once bootstrapping is complete, tear down bootstrap.
  hosts: kvm_host[0]
  tags: create_nodes, teardown_bootstrap
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  tasks:
    - name: Delete bootstrap volumes and list cluster images
      tags: create_nodes, teardown_bootstrap
      when: env.cluster.nodes.bootstrap.vm_name is defined
      block:
        - name: Delete bootstrap volumes and list cluster images
          tags: create_nodes, teardown_bootstrap
          ansible.builtin.shell: |
            META="{{ env.cluster.networking.metadata_name }}"
            virsh destroy {{ env.cluster.nodes.bootstrap.vm_name }} || true
            virsh undefine {{ env.cluster.nodes.bootstrap.vm_name }} --remove-all-storage --nvram || true
            virsh vol-delete --pool "${META}-vdisk" "{{ env.cluster.nodes.bootstrap.vm_name }}.qcow2" || true
            virsh vol-list "${META}-vdisk"
          register: cmd_output

        - name: Debug, print above command output
          tags: create_nodes, teardown_bootstrap
          ansible.builtin.debug:
            var: cmd_output.stdout_lines

- name: 6 create nodes - once bootstrapping is complete, create compute nodes.
  hosts: kvm_host
  tags: create_compute_nodes
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  roles:
    - common
    - role: create_compute_nodes
      when: env.cluster.nodes.compute.vm_name is defined

- name: 6 create nodes - create compute nodes using LPAR boot from ftp
  hosts: localhost
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  tasks:
    - name: Boot LPAR from ftp
      when: env.cluster.nodes.compute.lpar_name[0] is defined
      ansible.builtin.include_role:
        name: boot_lpar_from_ftp
      vars:
        parm_lpar_names: "{{ q('list', env.cluster.nodes.compute.lpar_name) | flatten }}"
        parm_lpar_prm_files: "{{ q('list', env.cluster.nodes.compute.lpar_prm_file) | flatten }}"
      loop: "{{ env.cluster.nodes.compute.lpar_name }}"
      loop_control:
        index_var: idx
